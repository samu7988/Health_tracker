/**
 * @file adc.c
 * @brief This file is to be used for the setting the ADC of the microcontroller.
 * @author Sayali mule
 * @date November 12, 2021
 * @Reference/Credits:
 *
 *
 */

//***********************************************************************************
// Include files
//***********************************************************************************

#include "adc.h"
// Include logging for this file
#define INCLUDE_LOG_DEBUG 1
#include "src/log.h"
//***********************************************************************************
// Macros
//***********************************************************************************
#define adcFreq   16000000
#define NUM_INPUTS (2)
#define MAX_VOLTAGE 2640
#define MIN_VOLTAGE 2120
//***********************************************************************************
// Global variables
//***********************************************************************************

volatile uint32_t sample;
volatile uint32_t millivolts;
uint32_t inputs[NUM_INPUTS];

//***********************************************************************************
// Function implementation
//***********************************************************************************
/*------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Initialise ADC peripheral

 Set the Reference voltage, Acquisition time, ADC channel input selection and enabling the ADC interrupt

 @param:None
 @param:None
PF7 adcPosSelAPORT2XCH23, PD13 APORT4XCH5
 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void ADC_init(){

    // Declare init structs
    ADC_Init_TypeDef init = ADC_INIT_DEFAULT;
    ADC_InitScan_TypeDef initScan = ADC_INITSCAN_DEFAULT;

    // Modify init structs
    init.prescale   = ADC_PrescaleCalc(adcFreq, 0);
    init.timebase = ADC_TimebaseCalc(0);


    initScan.diff       = 0;            // single ended
    initScan.reference  = adcRef2V5;    // internal 2.5V reference
    initScan.resolution = adcRes12Bit;  // 12-bit resolution
    initScan.acqTime    = adcAcqTime4;  // set acquisition time to meet minimum requirement
    initScan.fifoOverwrite = true;      // FIFO overflow overwrites old data

    // Select ADC input.
    // Add VDD to scan for demonstration purposes
//    ADC_ScanSingleEndedInputAdd(&initScan, adcScanInputGroup0, adcPosSelAPORT2XCH9); //PC9

    ADC_ScanSingleEndedInputAdd(&initScan, adcScanInputGroup0, adcPosSelAPORT2XCH23); //PF7
    ADC_ScanSingleEndedInputAdd(&initScan, adcScanInputGroup1, adcPosSelAPORT4XCH5); //PD13

    // Set scan data valid level (DVL) to 2. This will cause the scan IRQ to set when DVL +1 input channels have been converted and result is stored in FIFO
    ADC0->SCANCTRLX |= (NUM_INPUTS - 1) << _ADC_SCANCTRLX_DVL_SHIFT;

    // Clear ADC Scan fifo
    ADC0->SCANFIFOCLEAR = ADC_SCANFIFOCLEAR_SCANFIFOCLEAR;

    // Initialize ADC and Scan
    ADC_Init(ADC0, &init);
    ADC_InitScan(ADC0, &initScan);

    // Enable Scan interrupts
    ADC_IntEnable(ADC0, ADC_IEN_SCAN);

    // Enable ADC interrupts
    NVIC_ClearPendingIRQ(ADC0_IRQn);
    NVIC_EnableIRQ(ADC0_IRQn);
}
/*------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief:ADC interrupt handler

 Perform the required function when ADC conversion gets completed

 @param:None
 @param:None

 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void ADC0_IRQHandler(void)
{

    uint32_t adc_reading, i, id;

    // Get ADC results
    for(i = 0; i < NUM_INPUTS; i++)
    {
      // Read data from ADC
     adc_reading = ADC_DataIdScanGet(ADC0, &id);

      // Convert data to mV and store into array
     //analog_val = (adc_reading) * (SYSTEM_VOLTAGE)/(ADC_RESOLUTION)

      inputs[i] = adc_reading * 2500 / 4096;
      LOG_INFO("ADC voltage: %u\n\r",inputs[i]);

    }
    // Start next ADC conversion
    ADC_Start(ADC0, adcStartScan);

}
